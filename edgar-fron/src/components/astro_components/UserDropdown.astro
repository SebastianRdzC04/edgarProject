---
// UserDropdown.astro - Component that handles user authentication display
interface Props {
    showDashboard: boolean;
}

// Default values - will be updated by client-side script
let isLoggedIn = false;
let username = 'Usuario';
let userInitial = 'U';

const { showDashboard = true } = Astro.props;

const apiUrl = import.meta.env.PUBLIC_API_URL;


---

<!-- Botón de inicio de sesión (visible solo cuando no hay sesión) -->
<div id="login-button" class={isLoggedIn ? 'hidden' : 'block'}>
    <a href="/authenticate" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-300">
        Iniciar Sesión
    </a>
</div>

<!-- Dropdown de usuario (visible solo cuando hay sesión) -->
<div id="user-dropdown" class={`relative ${isLoggedIn ? 'block' : 'hidden'}`}>
    <button id="dropdown-button" class="flex items-center space-x-2 text-gray-800 hover:text-blue-600 focus:outline-none">
        <span class="h-8 w-8 bg-blue-100 rounded-full flex items-center justify-center">
            <span id="user-initial" class="font-medium text-blue-600">{userInitial}</span>
        </span>
        <span id="username-display" class="font-medium">{username}</span>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
        </svg>
    </button>
    <div id="dropdown-menu" class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 hidden">
        <a id="dashboard-link" href="/home" class="block px-4 py-2 text-gray-800 hover:bg-blue-50 hidden">
            Dashboard
        </a>
        <button id="logout-button" class="block w-full text-left px-4 py-2 text-gray-800 hover:bg-blue-50">
            Cerrar sesión
        </button>
    </div>
</div>

<script define:vars={{apiUrl}}>
    // Verificar el estado de autenticación al cargar la página
    document.addEventListener('DOMContentLoaded', async () => {
        const loginButton = document.getElementById('login-button');
        const userDropdown = document.getElementById('user-dropdown');
        const dropdownButton = document.getElementById('dropdown-button');
        const dropdownMenu = document.getElementById('dropdown-menu');
        const logoutButton = document.getElementById('logout-button');
        const userInitialElement = document.getElementById('user-initial');
        const usernameDisplay = document.getElementById('username-display');
        const dashboardLink = document.getElementById('dashboard-link');
        
        // Comprobación de autenticación (movida desde el frontmatter)
        try {
            const response = await fetch(`${apiUrl}/users/me`, {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                },
            });
            
            console.log('Response status:', response);
            
            if (response.ok) {
                const userData = await response.json();
                console.log('User data:', userData);
                const username = userData.username || 'Usuario';
                const userInitial = username.charAt(0).toUpperCase();
                
                // Actualizar UI para usuario autenticado
                if (loginButton) loginButton.classList.add('hidden');
                if (userDropdown) userDropdown.classList.remove('hidden');
                if (userInitialElement) userInitialElement.textContent = userInitial;
                if (usernameDisplay) usernameDisplay.textContent = username;
                
                // Verificar el rol del usuario
                try {
                    const roleResponse = await fetch(`${apiUrl}/users/me/role`, {
                        method: 'GET',
                        credentials: 'include',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    });
                    
                    if (roleResponse.ok) {
                        const roleData = await roleResponse.json();
                        console.log('Role data:', roleData);
                        
                        // Mostrar enlace de Dashboard solo si el usuario es admin
                        if (dashboardLink && roleData.role === "admin") {
                            dashboardLink.classList.remove('hidden');
                        }
                    }
                } catch (roleError) {
                    console.error('Error verificando rol:', roleError);
                }
            } else {
                // Actualizar UI para usuario no autenticado
                if (loginButton) loginButton.classList.remove('hidden');
                if (userDropdown) userDropdown.classList.add('hidden');
            }
        } catch (error) {
            console.error('Error verificando autenticación:', error);
            // Mostrar UI para usuario no autenticado en caso de error
            if (loginButton) loginButton.classList.remove('hidden');
            if (userDropdown) userDropdown.classList.add('hidden');
        }
        
        // Manejar el dropdown
        if (dropdownButton && dropdownMenu) {
            dropdownButton.addEventListener('click', (e) => {
                e.stopPropagation();
                dropdownMenu.classList.toggle('hidden');
            });
            
            // Cerrar dropdown al hacer clic fuera
            document.addEventListener('click', (event) => {
                if (!dropdownButton.contains(event.target) && !dropdownMenu.contains(event.target)) {
                    dropdownMenu.classList.add('hidden');
                }
            });
        }
        
        // Manejar el cierre de sesión
        if (logoutButton) {
            logoutButton.addEventListener('click', async () => {
                try {
                    const response = await fetch(`${apiUrl}/auth/logout`, {
                        method: 'POST',
                        credentials: 'include',
                    });
                    
                    if (response.ok) {
                        // Redireccionar a la página principal o recargar para actualizar el estado
                        window.location.href = '/';
                    } else {
                        console.error('Error al cerrar sesión');
                    }
                } catch (error) {
                    console.error('Error al cerrar sesión:', error);
                }
            });
        }
    });
</script>
